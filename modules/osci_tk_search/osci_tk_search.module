<?php

/**
 * Implements hook_menu()
 */
function osci_tk_search_menu() {
	$items = array();
	$items['api/search'] = array(
		'title' 			=> t('Search'),
		'page callback' 	=> 'osci_tk_search_query',
		'type' 				=> MENU_CALLBACK,
		'access arguments'  => array('access content'),
	);
	$items['api/opensearch'] = array(
		'title' 			=> t('Search'),
		'page callback' 	=> 'osci_tk_search_opensearch_query',
		'type' 				=> MENU_CALLBACK,
		'access arguments'  => array('access content'),
	);
	$items['admin/config/search/opensearch'] = array(
		'title' 			=> t('Open Search Settings'),
		'page callback' 	=> 'drupal_get_form',
		'page arguments' 	=> array('osci_tk_search_opensearch'),
		'access arguments' 	=> array('administer site configuration'),
		'file' 				=> 'osci_tk_search.admin.inc',
	);
	$items['opensearch/document'] = array(
		'title'				=> t('OpenSearch Document'),
		'page callback'		=> 'osci_tk_search_display_opensearch_document',
		'access arguments'  => array('access content'),
		'type'				=> MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implements hook_theme().
 */
function osci_tk_search_theme($existing, $type, $theme, $path) {
	return array(
		'opensearch_description' => array(
			'variables' => array(),
			'template' 	=> 'templates/opensearch-description',
			'file' 		=> 'osci_tk_search.templates.inc'
		),
		'opensearch_results' => array(
			'variables' => array(
				'response' => NULL,
			),
			'template'	=> 'templates/opensearch-results',
			'file'		=> 'osci_tk_search.templates.inc'
		),
	);
}

/**
 * Generate basic search results as JSON
 */
function osci_tk_search_query() {
	$response = osci_tk_search_do_query();
	// filter the facets
	$facets = osci_tk_search_prepare_facets($response->facet_counts);
	// setup new object response
	$results = new stdClass();
	$results = $response->response;
	$results->facets = $facets;
	print drupal_json_encode($results);
	drupal_exit();
}

/**
 * Generates open search results
 */
function osci_tk_search_opensearch_query() {
	$response = osci_tk_search_do_query();
	print theme('opensearch_results', array('response' => $response));
	drupal_exit();
}

/**
 * Generates a clean array of facets
 * @param  object $facet_counts Contains the search facets
 * @return array The formatted facets
 */
function osci_tk_search_prepare_facets($facet_counts) {
	$facets = array();
	if(empty($facet_counts->facet_fields->ss_section_id)) return $facets;

	foreach($facet_counts->facet_fields->ss_section_id as $section => $count) {
		$node = node_load($section);
		$facets[] = array(
			'section_id' => $section,
			'count' => $count,
			'section' => $node->title,
		);
	}
	return $facets;
}

/**
 * Perform primary query
 *
 * API variables
 *
 * @return Object
 */
function osci_tk_search_do_query() {
	global $user;

	// define default search properties
	$limit = 10000; // The number of results to return
	$facet_min_count = 1; // The minimum number of results required for a facet
	$facet_limit = 50; // The maximum number of facets
	$group_limit = 3; // The max number of results to return per group

	// setup query parameters
	$params['q']		= empty($_GET['key']) ? ' ' : $_GET['key'];
	$params['fl']		= '* score';
	$params['rows'] 	= $limit;
	$solrsort			= '';

	// retrieve the filters
	$filters = array();
	$raw_filters	= isset($_GET['filters']) ? explode(' ', $_GET['filters']) : array();
	foreach($raw_filters as $filter) {
		$filter_array = explode(':', $filter);
		$filters[$filter_array[0]] = $filter_array[1];
	}

	// create query object
	$query = apachesolr_drupal_query('oscitk', $params, $solrsort);
	// set page
	$query->page = pager_find_page();

	// set sorting
	if (!empty($_GET['sort']) && $_GET['sort'] == 'content') {
		$query->setSolrsort('bundle', 'desc');
	} else {
		$query->setSolrSort('score', 'desc');
	}

	// filter by content type
	if (!empty($filters['type'])) {
		if ($filters['type'] == 'content') {
			$query->addFilter('_query_', 'bundle:node OR bundle:paragraph');
		}

		if ($filters['type'] == 'figures') {
			$query->addFilter('_query_', 'bundle:figure');
		}

		if ($filters['type'] == 'footnotes') {
			$query->addFilter('_query_', 'bundle:footnote');
		}

		if ($filters['type'] == 'notes') {
			$query->addFilter('_query_', '"(bundle:note AND (is_uid:' . $user->uid . '))"');
		}
	}

	if (empty($filters['section'])) {
		// only retrieve results with a valid ss_section_id
		$query->addFilter('ss_section_id', '[' . "''" . ' TO *]');
	} else {
		// filter the specified ss_section_id
		$query->addFilter('ss_section_id', $filters['section']);
	}

	// filter the results by publication id
	if (!empty($filters['pid'])) {
		$query->addFilter('im_publication_id', $filters['pid']);
	}

	// add faceting
	$query->addParam('facet', 'true');
	$query->addParam('facet.mincount', $facet_min_count);
	$query->addParam('facet.limit', $facet_limit);
	$query->addParam('facet.field', 'ss_section_id');

	// If specified, return the results grouped by section
	if(!empty($_GET['group'])) {
		$query->addParam('group.facet', 'true');
		$query->addParam('group.ngroups', 'true');
		$query->addParam('group', 'true');
		$query->addParam('group.main', 'true');
		$query->addParam('group.field', 'ss_section_id');
		$query->addParam('group.limit', $group_limit);
	}

	// add content boost parameters to the query
	apachesolr_search_add_boost_params($query);
	// execute query
	list($final_query, $response) = apachesolr_do_query($query, $query->page);
	return $response;
}

/**
 * Display the OpenSearch document
 */
function osci_tk_search_display_opensearch_document() {
	print theme('opensearch_description');
}

/**
 * Implements hook_apachesolr_index_document_build()
 */
function osci_tk_search_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
	// only add items that are viewable by the reader
	if($entity->type === 'note') {
		$document->addField('ss_content_id', $entity->field_content_id['und'][0]['value']);
		$document->addField('ss_body', $entity->body['und'][0]['value']);
	} else {
		if(osci_tk_nodetree_entity_is_tree($entity->nid)) {
			$publications = _osci_tk_search_get_publications($entity);
			if(!empty($entity->field_footnote)) {
				_osci_tk_search_create_footnote_documents($entity, $document, $env_id, $publications);
			}
			if(!empty($entity->field_figure)) {
				_osci_tk_search_create_figure_documents($entity, $document, $env_id, $publications);
			}
			_osci_tk_search_get_path_hierarchy($entity, $document);
			_osci_tk_search_create_paragraph_documents($entity, $document, $env_id, $publications);

			if (isset($entity->entity_id)) {
				$document->addField('ss_section_id', $entity->entity_id);
			}
		}
	}
}

/**
 * Helper function for retrieving an array of publication nids
 * @param  object $entity The current entity
 * @return array         The array of publication nids
 */
function _osci_tk_search_get_publications($entity) {
	$trees = osci_tk_nodetree_get_data_for_nid($entity->nid);

	$publications = array();
	foreach($trees as $tree) {
		array_push($publications, $tree['rootNid']);
	}
	return $publications;
}

/**
 * Builds the necessary documents for a particular entity
 * @param  object $entity   The entity to process
 * @param  ApacheSolrDocument ApacheSolrDocument The solr document
 * @param  string $env_id   Solr environment id
 */
function _osci_tk_search_get_path_hierarchy($entity, ApacheSolrDocument $document) {
	if (!osci_tk_nodetree_entity_is_tree($entity->nid)) return;

	$trees = osci_tk_nodetree_get_data_for_nid($entity->nid);
	// if we're on the root we don't need to do anything else except add the document
	if(empty($trees)) {
		$document->addField('sm_path_hierarchy', "/{$entity->title}");
		$document->addField('sm_path_hierarchy_depth', "0/{$entity->title}");
		return;
	}

	// iterate through all fields
	foreach($trees as $tree) {
		$root_nid = $tree['rootNid'];
		$current_tree = $tree;
		$hierachy = array($entity->nid);

		// add inital parent
		array_unshift($hierachy, $tree['parentNid']);

		do {
			$parent_trees = osci_tk_nodetree_get_data_for_nid($current_tree['parentNid']);
			foreach($parent_trees as $parent_tree) {
				if ($parent_tree['rootNid'] == $root_nid) {
					array_unshift($hierachy, $parent_tree['parentNid']);
					$current_tree = $parent_tree;
					break;
				} else {
					$current_tree = null;
				}
			}
		} while (!empty($current_tree) && $current_tree['parentNid'] != $root_nid);

		$current_path = '';

		// buld paths and add to document
		foreach($hierachy as $key => $nid) {
			$parent_node = node_load($nid);

			$current_path .= "/{$parent_node->title}";

			$document->addField('sm_path_hierarchy', $current_path);
			$document->addField('sm_path_hierarchy_depth', $key . $current_path);
		}
	}
}

/**
 * Creates new documents at the paragraph level
 * @param  object $entity     The parent entity
 * @param  object $entity_doc The parent entity solr document
 * @param  string $env_id     Solr environment id
 * @param  string $publications An array of publications this entity belongs too
 */
function _osci_tk_search_create_paragraph_documents($entity, $entity_doc, $env_id, $publications) {
	$documents = array();

	// retrieve the node in 'epub' view
	$view = node_view($entity, 'epub');

	// remove figures and footnotes from display
	unset($view['field_figure']);
	unset($view['field_footnote']);

	// render the content
	$content = render($view);

	// retrieve all content in paragraph tags
	preg_match_all('/<p>(.*?)<\/p>/', $content, $matches);

	// setup documents for each paragraph
	foreach($matches[0] as $delta => $paragraph) {
		// strip container
		$content = str_replace(array('<p>', '</p>'), '', $paragraph);

		$pid = _osci_tk_search_create_paragraph_id($entity->nid, $delta);

		$document = clone $entity_doc;
		$document->id = $pid;

		unset($document->url);
		unset($document->path);

		$document->content = trim($content);
		$document->teaser = substr(strip_tags($document->content), 0, 300);
		$document->ss_paragraph_id = $pid;
		$document->ss_section_id = $entity->nid;
		$document->im_publication_id = $publications;
		$document->bundle = 'paragraph';
		$document->bundle_name = 'paragraph';
		$documents[] = $document;
	}
	// send to solr
	apachesolr_index_send_to_solr($env_id, $documents);
}

/**
 * Creates new documents for an entitys footnotes
 * @param  object $entity     The parent entity
 * @param  object $entity_doc The parent entity solr document
 * @param  string $env_id     Solr environment id
 * @param  string $publications An array of publications this entity belongs too
 */
function _osci_tk_search_create_footnote_documents($entity, $entity_doc, $env_id, $publications) {
	$documents = array();

	// setup documents for each footnote
	foreach($entity->field_footnote[$entity->language] as $delta => $item) {
		$fid = _osci_tk_search_create_footnote_id($entity->nid, $delta);

		$document = clone $entity_doc;

		unset($document->url);
		unset($document->path);

		$document->id = $fid;
		$document->path = $document->path . '/' . $fid;
		$document->content = trim($item['value']);
		$document->teaser = substr(strip_tags($item['value']), 0, 300);
		$document->ss_footnote_id = $fid;
		$document->im_publication_id = $publications;
		$document->ss_section_id = $entity->nid;
		$document->bundle = 'footnote';
		$document->bundle_name = 'footnote';
		$documents[] = $document;
	}
	// send to solr
	apachesolr_index_send_to_solr($env_id, $documents);
}

/**
 * Creates new documents for a entitys figures
 * @param  object $entity     The parent entity
 * @param  object $entity_doc The parent entity solr document
 * @param  string $env_id     Solr environment id
 * @param  string $publications An array of publications this entity belongs too
 */
function _osci_tk_search_create_figure_documents($entity, $entity_doc, $env_id, $publications) {
	$documents = array();

	// setup documents for each figure
	// error_log(print_r($entity->field_figure, true));
	foreach($entity->field_figure['und'] as $delta => $item) {
		$fid = _osci_tk_figure_create_id($entity->nid, $delta);;

		$document = clone $entity_doc;

		unset($document->url);
		unset($document->path);

		$document->id = $fid;
		$document->content = trim($item['value']);
		$document->teaser = substr(strip_tags($item['value']), 0, 300);
		$document->ss_figure_id = $fid;
		$document->im_publication_id = $publications;
		$document->ss_section_id = $entity->nid;
		$document->bundle = 'figure';
		$document->bundle_name = 'figure';
		$documents[] = $document;
	}
	// send to solr
	apachesolr_index_send_to_solr($env_id, $documents);
}

/**
 * Helper function for generating paragraph ids
 * @param  int $nid   The node id
 * @param  int $delta The paragraph position
 * @return string
 */
function _osci_tk_search_create_paragraph_id($nid, $delta) {
	return 'p-' . $nid . '-' . $delta;
}

/**
 * Helper function for generating the footnote id
 * @param  int $nid   The node id
 * @param  int $delta The position in the field array
 * @return string
 */
function _osci_tk_search_create_footnote_id($nid, $delta) {
	return 'fn-' . $nid . '-' . $delta;
}

/**
 * Replaces title spacing with hyphens
 * @param  string $title Book/section title
 * @return string
 */
function _osci_tk_search_clean_title($title) {
	return str_replace(' ', '-', $title);
}
