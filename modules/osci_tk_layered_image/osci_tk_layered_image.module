<?php

function osci_tk_layered_image_init() {
	// jQuery tabs
	drupal_add_library('system', 'ui.slider');
	drupal_add_library('system', 'ui.resizable');
	// Polymaps
	drupal_add_js(libraries_get_path('polymaps') . '/polymaps.js');

	$libPath = libraries_get_path('OSCI-Toolkit-Frontend');

	// layered_image Assets
	drupal_add_js("$libPath/js/external/jquery.qtip.js");
	drupal_add_css("$libPath/js/external/jquery.qtip.css");
	drupal_add_js("$libPath/js/oscitk/osci_tk_layered_image.js");
	drupal_add_css("$libPath/css/layered_image.css");
}


function osci_tk_layered_image_menu() {
	$items = array();

	// $items['layered_image-demo'] = array(
	// 	'title'             => t('layered_image Demo'),
	// 	'page callback'     => 'osci_tk_layered_image_demo',
	// 	'access arguments'  => array('access content'),
	// 	'type'              => MENU_CALLBACK
	// );

	$items['layered_image/is-svg-asset'] = array(
		'title'             => 'SVG Asset Callback',
		'page callback'     => 'osci_tk_layered_image_is_svg_asset',
		'access arguments'  => array('access content'),
		'type'              => MENU_CALLBACK
	);

	$items['layered_image/view/%'] = array(
		'title'             => 'View a layered_image asset as a standalone figure',
		'page callback'     => 'osci_tk_layered_image_view',
		'page arguments'    => array(2),
		'access arguments'  => array('access content'),
		'type'              => MENU_CALLBACK
	);

	$items['layered_image/%/data.json'] = array(
		'title'				=> 'Get layered_image asset data in json format',
		'page callback'		=> 'osci_tk_layered_image_get_json',
		'page arguments'	=> array(1),
		'access arguments'	=> array('access content'),
		'type'				=> MENU_CALLBACK
	);

	$items['admin/config/system/iip'] = array(
		'title'             => 'IIP Settings',
		'page callback'     => 'drupal_get_form',
		'page arguments'    => array('osci_tk_layered_image_iip_admin_form'),
		'access arguments'  => array('administer site configuration'),
	);

	return $items;
}

function osci_tk_layered_image_demo() {
	$nodes = variable_get('osci_tk_layered_image_demo_nodes', array());
	$ret = "";

	foreach ($nodes as $nid) {
		$node = node_load($nid);
		// build layered_image asset div
		$ret .= "<h2>$node->title</h2>";
		$ret .= '<figure style="width:640px; height:480px;">';
		$ret .= _osci_tk_layered_image_get_layered_image_html($node->nid);
		$ret .= '</figure>';
	}

	return $ret;
}

function osci_tk_layered_image_form_alter(&$form, &$form_state, $form_id) {
	// allow to reference content types for node reference field
	if ($form_id == 'field_ui_field_edit_form') {
		if ($form['#field']['field_name'] == 'field_assets') {
			$form['field']['settings']['referenceable_types']['#disabled'] = FALSE;
		}
	}
	if ($form_id == 'iip_asset_node_form') {
		// hide the image field, and the attributes field
		// we populate it automatically from the IIP server
		$form['field_image']['#attributes']['style'] = "display:none;";
		$form['field_ptiff_attr']['#attributes']['style'] = "display:none;";

		// get the options from the drupal variable
		$hosts = variable_get('osci_tk_layered_image_iip_hosts', array());
		$form['field_iip_server']['und']['#options'] = array();
		foreach ($hosts as $host) {
			$form['field_iip_server']['und']['#options'][$host['name']] = $host['name'];
		}
	}

	if ($form_id == 'layered_image_node_form') {
		// hide the field_data
		$form['field_data']['#attributes']['style'] = "display:none;";

		// add the color picker javascript
		drupal_add_js(libraries_get_path('jscolor') . '/jscolor.js');

		// add the annotation flag checkbox
		foreach ($form['field_assets']['und'] as $key => $value) {
			if (is_numeric($key)) {

				// add a title to the node reference, for asthetics
				$form['field_assets']['und'][$key]['nid']['#title'] = 'Asset';

				// ANNOTATION FLAG
				// get default value
				$default = '';
				$annotationState = FALSE;
				if (isset($form_state['node']->field_assets['und'][$key]['annotation_flag'])) {
					$default = (bool) $form_state['node']->field_assets['und'][$key]['annotation_flag'];
					// store for later for the color selector
					$annotationState = $default;
				}
				// expose the new field with the default value
				$form['field_assets']['und'][$key]['annotation_flag'] = array(
					'#type'             => 'checkbox',
					'#title'            => 'Annotation Asset',
					'#default_value'    => $default,
					'#weight'           => 100
				);

				// LAYER TITLE
				// get default if set
				$default = '';
				if (isset($form_state['node']->field_assets['und'][$key]['title'])) {
					$default = $form_state['node']->field_assets['und'][$key]['title'];
				}
				// expose the new field with the default value
				$form['field_assets']['und'][$key]['title'] = array(
					'#type'             => 'textfield',
					'#title'            => 'Layer Title',
					'#default_value'    => $default,
					'#weight'           => 99
				);

				// COLOR SELECTION
				// should be hidden and only exposed when an svg node is
				// selected and annotation flag is set
				$default = '';
				if (isset($form_state['node']->field_assets['und'][$key]['color'])) {
					$default = $form_state['node']->field_assets['und'][$key]['color'];
				}
				$form['field_assets']['und'][$key]['color'] = array(
					'#type'             => 'textfield',
					'#required'         => FALSE,
					'#weight'           => 101,
					'#default_value'    => $default,
					'#field_suffix'     => '&nbsp;<label class="option">Color</label>',
					'#attributes'       => array(
						'class' => array(
							'color {pickerClosable:true,required:false}',
							'ca-edit-color'
						),
					),
				);
				// if the annotation state from above is true, show the picker
				if ($annotationState) {
					unset($form['field_assets']['und'][$key]['color']['#attributes']['disabled']);
				}

				// add a bit of markup/script to automate the color picker
				global $base_url;
				$script =
<<<SCRIPT
<script>
	jQuery(function(jQuery) {
		var $ = jQuery;
		var togglePicker = function() {
			var checkBox = $(this);
			if($(this).attr("checked")) {
				var inputText = $('#edit-field-assets-und-{$key}-nid').val();
				var matches = inputText.match(/\[nid:(\d+)\]/);
				if (matches[1]) {
					var nid = parseInt(matches[1]);
				} else return;
				// send a request to drupal and determine if this is svg or not
				$.post('{$base_url}/layered_image/is-svg-asset', {nid: nid}, function(data) {
					if (data.is_svg_asset) {
						$("#edit-field-assets-und-{$key}-color").parent().css("display", "block");
					}
					else {
						$("#edit-field-assets-und-{$key}-color").parent().css("display", "none");
					}
				}, 'json');
			}
			else {
				$("#edit-field-assets-und-{$key}-color").parent().css("display", "none");
			}
		};
		$("#edit-field-assets-und-{$key}-annotation-flag").each(togglePicker);
		$("#edit-field-assets-und-{$key}-annotation-flag").bind("click", togglePicker);
	});
</script>
SCRIPT;
				$form['field_assets']['und'][$key]['colorpicker'] = array(
					'#weight' => 102,
					'#markup' => $script,
				);
			}
		}
	}
}

function osci_tk_layered_image_node_presave($node) {
	if ($node->type == 'layered_image') {
		// get the aspect ratio for this layered_image asset
		$node->field_aspect_ratio['und'][0]['value'] = _osci_tk_layered_image_get_layered_image_aspect($node);

		// form the serialized field_data
		$data = array();
		// grab the flags from each asset
		foreach ($node->field_assets['und'] as $value) {
			$data[] = $value;
		}
		$serialized_data = serialize($data);
		$node->field_data['und'][0]['value'] = $serialized_data;
	}
}

function osci_tk_layered_image_node_insert($node) {
	if ($node->type === 'iip_asset') {
		if (!isset($node->ptiff_image_processed)) {
			_osci_tk_layered_image_get_ptiff_image($node);
		}
		if (!isset($node->ptiff_attr_processed)) {
			_osci_tk_layered_image_get_ptiff_attr($node);
		}
	}
}

function osci_tk_layered_image_node_update($node) {
	if ($node->type === 'iip_asset') {
		if (!isset($node->ptiff_image_processed)) {
			_osci_tk_layered_image_get_ptiff_image($node);
		}
		if (!isset($node->ptiff_attr_processed)) {
			_osci_tk_layered_image_get_ptiff_attr($node);
		}
	}
}

function osci_tk_layered_image_node_load($nodes, $types) {
	foreach ($nodes as &$node) {
		if ($node->type == 'layered_image') {
			// get aspect ratio
			$node->field_aspect_ratio['und'][0]['value'] = _osci_tk_layered_image_get_layered_image_aspect($node);
			// get serialized flag data
			$flags = isset($node->field_data['und']) ? unserialize($node->field_data['und'][0]['value']) : null;
			if (!is_array($flags)) {
				watchdog('osci_tk_layered_image', 'Invalid file flags on '.$node->nid);
				return;
			}
			$assets = $node->field_assets['und'];
			// apply for each flag to the field_assets field
			foreach ($flags as $flag) {
				foreach ($assets as $key => $asset) {
					if ($flag['nid'] == $asset['nid']) {
						$node->field_assets['und'][$key]['annotation_flag'] = $flag['annotation_flag'];
						$node->field_assets['und'][$key]['title'] = $flag['title'];
						$node->field_assets['und'][$key]['color'] = $flag['color'];
					}
				}
			}
		}
		if ($node->type == 'svg_asset') {
			// get the attributes and attach to the node
			$attr = _osci_tk_layered_image_get_svg_attr(drupal_realpath($node->field_svg['und'][0]['uri']));
			$node->field_svg['und'][0]['width'] = $attr->width;
			$node->field_svg['und'][0]['height'] = $attr->height;
		}
	}
}


function osci_tk_layered_image_theme() {

	return array(
		'osci_tk_layered_image_figure_formatter' => array(
			'template'	=> 'templates/osci_tk_layered_image_figure_formatter',
			'file'      => 'osci_tk_layered_image.templates.inc',
			'variables' => array(
				'item'	=> array()
			),
		),
	);

}


function osci_tk_layered_image_view($nid)
{
	drupal_add_library('system', 'ui.slider');
	drupal_add_js(drupal_get_path('module', 'osci_layered_image') . '/js/osci_tk_layered_image_view.js', 'file');
	drupal_add_css(drupal_get_path('module', 'osci_layered_image') . '/css/osci_tk_layered_image_view.css', 'file');

	$node = node_load($nid);

	$elements = node_view($node, 'body_copy');

	$catalogNumber = (isset($node->field_osci_catalogue_number['und']) && $node->field_osci_catalogue_number['und'][0]['value']) ? $node->field_osci_catalogue_number['und'][0]['value'] : null;

	$plateNid = null;
	if (isset($elements['field_osci_plate_image'])) {
		$plateNid = ($elements['field_osci_plate_image']['#items'][0]['nid']) ? $elements['field_osci_plate_image']['#items'][0]['nid'] : null;
		$plateCaption = $node->field_osci_navigation_title['und'][0]['value'];
	}

	$plateId = 'osci_plate_fig';
	$plateFigure = array(
		'figure_reference' => $plateNid,
		'number_template' => ($catalogNumber) ? "Cat. {$catalogNumber}" : ' ',
		'caption' => $plateCaption,
		'position' => 't',
		'columns' => '55%',
		'id' => $plateId,
		'format' => 'footnote',
		'figCount' => 0,
		'figOccurences' => 1
	);

	return theme('body_copy_figure', array('figure' => $plateFigure));

}

/**
 * Implements hook_osci_tk_image_types().
 * for osci_tk_features admin settings
 */
function osci_tk_layered_image_osci_tk_image_types() {
	$types[] = array(
		'title'			=> 'layered_image Thumbnail',
		'variable'		=> 'osci_tk_image_style_layered_image_thumbnail',
		'description'	=> 'Thumnail used to represent a layered_image asset'
	);

	return $types;
}

/*
 * utility callback that determines if nid provided is an svg asset or not
 * returns true/false
 */
function osci_tk_layered_image_is_svg_asset() {
	$nid = (int) $_POST['nid'];
	$node = node_load($nid);
	$response = new stdClass();
	if ($node && $node->type == 'svg_asset') {
		$response->is_svg_asset = TRUE;
	}
	else {
		$response->is_svg_asset = FALSE;
	}
	print json_encode($response);
}

/**
 * Implements HOOK_figure_html_NODETYPE().
 */
function osci_tk_layered_image_figure_html_layered_image($node) {
	$thumbStyle = variable_get('osci_tk_image_style_layered_image_thumbnail', 'osci_tk_default');

	// create a unique id for this layered_image asset
	$id = "layered_image-asset-" . preg_replace('/\./', '', ((string) microtime(TRUE)));

	// build a list of the layers
	$layers = "";
	$num_layers = 1;
	foreach ($node->field_assets['und'] as $asset) {
		// load in the referenced asset
		$layer_node = node_load($asset['nid']);
		$data = array();

		// set layer number, parent, and id
		$data['layer_num'] = $num_layers;
		$data['layer_id'] = $layer_node->nid;
		$data['parent_asset'] = $id;
		$data['id'] = "{$id}-layer-{$num_layers}";
		$num_layers++;

		// set normalized type according to asset type
		switch ($layer_node->type) {
			case "iip_asset":
				$data['type'] = 'iip';
				break;
			case "image_asset":
				$data['type'] = 'image';
				break;
			case "svg_asset":
				$data['type'] = 'svg';
				break;
		}

		// set the annotation flag
		if (isset($asset['annotation_flag']) && $asset['annotation_flag'] > 0) {
			$data['annotation'] = "true";
		} else {
			$data['annotation'] = "false";
		}

		// set the title if provided, or use the layer node's title
		if (!empty($asset['title'])) {
			$data['title'] = $asset['title'];
		} else {
			$data['title'] = $layer_node->title;
		}

		// set the ptiff specific values
		if ($data['type'] == 'iip') {
			// some of the needed information is serialized
			$attr = unserialize($layer_node->field_ptiff_attr['und'][0]['value']);
			$data['ptiff_server'] = _osci_tk_layered_image_iip_host_url($layer_node->field_iip_server['und'][0]['value']);
			$data['ptiff_path'] = $layer_node->field_ptiff_path['und'][0]['value'];
			$data['width'] = $attr['width'];
			$data['height'] = $attr['height'];
			$data['zoom_levels'] = $attr['zoom_levels'];
			$data['thumb'] = image_style_url($thumbStyle, $layer_node->field_image['und'][0]['uri']);
		}

		// set the image specific values
		if ($data['type'] == 'image') {
			$data['image_path'] = file_create_url($layer_node->field_image['und'][0]['uri']);
			$size = getimagesize(drupal_realpath($layer_node->field_image['und'][0]['uri']));
			$data['width'] = $size[0];
			$data['height'] = $size[1];
			$data['thumb'] = image_style_url($thumbStyle, $layer_node->field_image['und'][0]['uri']);
		}

		// set the svg specific values
		if ($data['type'] == 'svg') {
			$data['svg_path'] = file_create_url($layer_node->field_svg['und'][0]['uri']);
			$data['width'] = $layer_node->field_svg['und'][0]['width'];
			$data['height'] = $layer_node->field_svg['und'][0]['height'];
			$data['color'] = $asset['color'];
			$data['thumb'] = image_style_url($thumbStyle, $layer_node->field_svg['und'][0]['uri']);
		}

		// form our data attributes string
		$data_string = "";
		foreach ($data as $key => $value) {
			$data_string .= 'data-' . $key . '="' . $value . '" ';
		}

		// form our output for this asset
		$layers .= '<li class="layered_image-layer" ' . $data_string . '></li>';
	}

	$ret =    '<div class="layered_image-asset" data-aspect="'._osci_tk_layered_image_get_layered_image_aspect($node)
			. '" data-collapsed="true" data-nid="'.(isset($node->nid) ? $node->nid : 0).'" id="'.$id.'">'
			. '<ul class="layered_image-layers" style="display:none;">'
			. $layers
			. '</ul>'
			. '</div>';

	return $ret;
}

// implements HOOK_figure_html_NODETYPE
function osci_tk_layered_image_figure_html_iip_asset($node) {
	$limage = new stdClass();
	$limage->type = 'layered_image';
	$limage->language = LANGUAGE_NONE;
	node_object_prepare($limage);
	$limage->field_assets['und'][0]['nid'] = $node->nid;
	if (isset($node->field_image)) {
		$limage->field_image = $node->field_image;
	}
	return osci_tk_layered_image_figure_html_layered_image($limage);
}

// implements HOOK_figure_html_NODETYPE
function osci_tk_layered_image_figure_html_image_asset($node) {
	$limage = new stdClass();
	$limage->type = 'layered_image';
	$limage->language = LANGUAGE_NONE;
	node_object_prepare($limage);
	$limage->field_assets['und'][0]['nid'] = $node->nid;
	if (isset($node->field_image)) {
		$limage->field_image = $node->field_image;
	}
	return osci_tk_layered_image_figure_html_layered_image($limage);
}

// called from osci_tk_layered_image node hooks
// retrieves the full image from the iip server and saves it to the node as the static image
function _osci_tk_layered_image_get_ptiff_image($node) {
	$node->ptiff_image_processed = true;
	$iip_host = _osci_tk_layered_image_iip_host_url($node->field_iip_server['und'][0]['value']);
	$command = "?FIF={$node->field_ptiff_path['und'][0]['value']}&CVT=jpeg";
	$curl = curl_init($iip_host . $command);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
	$output = curl_exec($curl);
	curl_close($curl);

	// Save the file with the new Drupal 7 File API
	$fo = file_save_data($output, "public://iip_thumbs/iip_image_node_" . $node->nid . ".jpg", FILE_EXISTS_REPLACE);
	if ($fo && getimagesize($fo->uri)) {
		$node->field_image['und'][0] = (array) $fo;
		$node->is_new = false;
		node_save($node);
	} else {
		if ($fo) file_delete($fo);
		drupal_set_message(t('Could not retrieve an image from the IIP server. Please check the PTIFF path and server.'), 'error');
	}
}

// called from osci_tk_layered_image node hooks
// retrieves the image attributes from the iip server and saves it serialized in field_ptiff_attr
function _osci_tk_layered_image_get_ptiff_attr($node) {
	$node->ptiff_attr_processed = true;
	// gather the server url and the ptiff path
	$iip_srv_url = _osci_tk_layered_image_iip_host_url($node->field_iip_server['und'][0]['value']);
	$ptiff_path = $node->field_ptiff_path['und'][0]['value'];

	// Get image data as a text response from the IIP server
	// Must supply the fif parameter
	$url = "{$iip_srv_url}?FIF={$ptiff_path}&OBJ=Basic-info";
	$curl = curl_init($url);
	curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
	$res = curl_exec($curl);
	curl_close($curl);
	if ($res != false && !stristr($res, 'error')) {
		// Parse the image maximum dimensions and the number of zoom layers
		preg_match('/Max-size:(\d+) (\d+)/', $res, $matches);
		$iw = $matches[1];
		$ih = $matches[2];
		preg_match('/Resolution-number:(\d+)/', $res, $matches);
		$zl = $matches[1];

		// Craft our attributes array
		$attr = array(
			'width' => $iw,
			'height' => $ih,
			'zoom_levels' => $zl,
		);
		// place attributes into proper field, serialized
		$node->field_ptiff_attr['und'][0]['value'] = serialize($attr);
		$node->is_new = false;
		node_save($node);
	} else {
		drupal_set_message(t('Could not retrieve image information from the IIP server.  Please check path and server'), 'error');
	}
}

// turns an iip host name into an iip host url by comparing with
// the list of hosts stored in the admin setting
function _osci_tk_layered_image_iip_host_url($host_name) {
	$avail_hosts = variable_get('osci_tk_layered_image_iip_hosts');
	// find the host url
	foreach ($avail_hosts as $host) {
		if ($host['name'] == $host_name) {
			return $host['url'];
		}
	}
}


function _osci_tk_layered_image_get_svg_attr($file_path) {
	$attr = new stdClass;
	// get the width and height from the viewBox attribute of the svg
	$xml = simplexml_load_file($file_path);
	if (is_object($xml)) {
		$xmlAttr = (array) $xml->attributes();
		// try first to determine size by height and width attributes
		if (isset($xmlAttr['@attributes']['width']) && isset($xmlAttr['@attributes']['height'])) {
			$attr->width = (int) $xmlAttr['@attributes']['width'];
			$attr->height = (int) $xmlAttr['@attributes']['height'];
			return $attr;
		}
		// alternatively, try to get height and width from viewBox
		if (isset($xmlAttr['@attributes']['viewBox'])) {
			$viewBox = explode(' ', $xmlAttr['@attributes']['viewBox']);
			$attr->width = (int) $viewBox[2] - $viewBox[0];
			$attr->height = (int) $viewBox[3] - $viewBox[1];
			return $attr;
		}
	}
	$attr->width = 0;
	$attr->height = 0;
	return $attr;
}


function _osci_tk_layered_image_get_layered_image_aspect($node) {
	if (!$node) return 1;

	// get the max bounds in pixels of all the layers in this asset
	$width = $height = 0;

	foreach ($node->field_assets['und'] as $asset_pointer) {
		$asset = node_load($asset_pointer['nid']);

		if ($asset->type == "image_asset") {
			// get the dimensions of the image
			$size = getimagesize(drupal_realpath($asset->field_image['und'][0]['uri']));
			if ($size) {
				if ($size[0] > $width) {
					$width = $size[0];
				}
				if ($size[1] > $height) {
					$height = $size[1];
				}
			}
		}

		if ($asset->type == "iip_asset") {
			$data = unserialize($asset->field_ptiff_attr['und'][0]['value']);
			if ($data['width'] > $width) {
				$width = $data['width'];
			}
			if ($data['height'] > $height) {
				$height = $data['height'];
			}
		}

		if ($asset->type == "svg_asset") {
			if ($asset->field_svg['und'][0]['width'] > $width) {
				$width = $asset->field_svg['und'][0]['width'];
			}
			if ($asset->field_svg['und'][0]['height'] > $height) {
				$height = $asset->field_svg['und'][0]['height'];
			}
		}
	}

	if ($width > 0 && $height > 0) return ($width / $height);
	else return 1;
}

function osci_tk_layered_image_get_json($nid)
{
	$ret = new stdClass();

	$node = node_load($nid);

	switch($node->type)
	{
		case 'iip_asset':
		case 'svg_asset':
		case 'image_asset':
			$node->field_assets['und'][0]['nid'] = $node->nid;
	}

	$ret->content = _osci_tk_layered_image_get_layered_image_html($nid);
	$ret->aspect  = _osci_tk_layered_image_get_layered_image_aspect($node);

	return drupal_json_output($ret);
}


/**
 * Retrieve the figure preview thumbnail and callback function for iip_assets
 * @param array $node
 * @return array
 */
function osci_tk_layered_image_osci_tk_figure_preview_iip_asset($node)
{
	return osci_tk_layered_image_osci_tk_figure_preview_layered_image_asset($node);
}

/**
 * Retrieve the figure preview thumbnail and callback function for svg_assets
 * @param array $node
 * @return array
 */
function osci_tk_layered_image_osci_tk_figure_preview_svg_asset($node)
{
	return osci_tk_layered_image_osci_tk_figure_preview_layered_image_asset($node);
}

/**
 * Retrieve the figure preview thumbnail and callback function for image_assets
 * @param array $node
 * @return array
 */
function osci_tk_layered_image_osci_tk_figure_preview_image_asset($node)
{
	return osci_tk_layered_image_osci_tk_figure_preview_layered_image_asset($node);
}

/**
 * Retrieve the figure preview thumbnail and callback function for layered_image_assets
 * @param array $node
 * @return array
 */
function osci_tk_layered_image_osci_tk_figure_preview_layered_image_asset($node)
{
	$return = array();
	if (count($node->field_image) > 0) {
		// there is a representative image, return it in a div
		$return['image_uri'] = $node->field_image['und'][0]['uri'];
	}

	$return['callback'] = 'osci_tk_layered_image_preview';

	return $return;
}

/**
 * Load the javascript necessary for the figure options
 * We are no longer are using this hook for the layered image options
 */
// function osci_tk_layered_image_osci_tk_figure_preview_add_callback_js_layered_image_asset()
// {
// 	drupal_add_js(drupal_get_path('module','osci_tk_layered_image') . '/js/osci_tk_layered_image_figure_options.js');
// }
// function osci_tk_layered_image_osci_tk_figure_preview_add_callback_js_iip_asset()
// {
// 	drupal_add_js(drupal_get_path('module','osci_tk_layered_image') . '/js/osci_tk_layered_image_figure_options.js');
// }
// function osci_tk_layered_image_osci_tk_figure_preview_add_callback_js_image_asset()
// {
// 	drupal_add_js(drupal_get_path('module','osci_tk_layered_image') . '/js/osci_tk_layered_image_figure_options.js');
// }

function osci_tk_layered_image_osci_tk_figure_content($args) {
	if (!isset($args['item']['export'])) {
		$args['item']['export'] = false;
	}

	$asset = node_load($args['item']['asset_reference']);
	switch($asset->type) {
		case 'image_asset':
		case 'iip_asset':
		case 'layered_image':

			global $base_url;
			// parse the section id from the figure identifier
			preg_match('/fig-(\d+)-(\d+)/', $args['item']['fig_id'], $matches);
			if($args['item']['export']) {
				$asset_node = node_load($args['item']['asset_reference']);
				$args['item']['thumbnail'] = _osci_tk_epub_asset_process_uri($asset_node->field_image['und'][0]['uri'], $export);
			}
			$args['item']['content_url'] = $base_url.'/api/epub/'.$matches[1].'/'.$matches[2].'/figure.xhtml';
			return theme('osci_tk_layered_image_figure_formatter', array('item' => $args['item']));
	}
}

function osci_tk_layered_image_osci_tk_figure_formatter_alter(&$vars) {
	if ($vars['item']['type'] === 'iip_asset') {
		$asset = node_load($vars['item']['asset_reference']);
		$attrs = unserialize($asset->field_ptiff_attr['und'][0]['value']);
		$vars['item']['aspect'] = (int) $attrs['width'] / (int) $attrs['height'];
	}
	if ($vars['item']['type'] === 'layered_image') {
		$asset = node_load($vars['item']['asset_reference']);
		$vars['item']['aspect'] = $asset->field_aspect_ratio['und'][0]['value'];
	}
	if ($vars['item']['type'] === 'image_asset') {
		$vars['item']['type'] = 'layered_image';
	}
	// correct the public url scheme for previewUri in figure options
	if (isset($vars['item']['options'])) {
		$opts = json_decode($vars['item']['options']);

		if (isset($opts->previewUri)) {
			$opts->previewUri = file_create_url($opts->previewUri);
			$vars['item']['options'] = json_encode($opts);
			$vars['item']['thumbnail'] = $opts->previewUri;
		}
	}
}

function osci_tk_layered_image_iip_admin_form($form, &$form_state) {
	// form the text area default value
	$hosts = variable_get('osci_tk_layered_image_iip_hosts', array());
	$hosts_field = '';
	foreach ($hosts as $host) {
		$hosts_field = $hosts_field . $host['name'] . '|' . $host['url'] . "\n";
	}
	$form = array();

	$form['osci_tk_layered_image_iip_hosts'] = array(
			'#type'				=> 'textarea',
			'#title'			=> 'IIP Hosts',
			'#description'		=> 'A keyed list of IIP servers. One per line, in name|url format',
			'#default_value'	=> $hosts_field
	);

	$form['#submit'][] = 'osci_tk_layered_image_iip_admin_form_submit';

	return system_settings_form($form);
}

function osci_tk_layered_image_iip_admin_form_submit($form, &$form_state) {
	$value_text = $form_state['values']['osci_tk_layered_image_iip_hosts'];
	// break apart the lines
	$value_lines = explode("\n", $value_text);
	$values = array();
	foreach ($value_lines as $line) {
		$split = explode('|', $line);
		if ($split[0] && $split[1]) {
			$val_arr = array();
			$val_arr['name'] = trim($split[0]);
			$val_arr['url'] = trim($split[1]);
			$values[] = $val_arr;
		}
	}
	$form_state['values']['osci_tk_layered_image_iip_hosts'] = $values;
}

// return thumbnails for figures
function osci_tk_layered_image_osci_tk_figure_thumbnail($args) {
	$asset = node_load($args['item']['asset_reference']);
	// first attempt on field_asset_thumbnail
	if (isset($asset->field_asset_thumbnail['und'][0]['uri'])) {
		return file_create_url($asset->field_asset_thumbnail['und'][0]['uri']);
	}
	// second attempt on field_image
	if (isset($asset->field_image['und'][0]['uri'])) {
		return file_create_url($asset->field_image['und'][0]['uri']);
	}
	// third, attempt on first referenced asset's field_image
	if (isset($asset->field_assets['und'][0]['nid'])) {
		$refNode = node_load($asset->field_assets['und'][0]['nid']);
		if (isset($refNode->field_asset_thumbnail['und'][0]['uri'])) {
			return file_create_url($refNode->field_asset_thumbnail['und'][0]['uri']);
		}
		// second attempt on field_image
		if (isset($refNode->field_image['und'][0]['uri'])) {
			return file_create_url($refNode->field_image['und'][0]['uri']);
		}
	}
	return '';
}
