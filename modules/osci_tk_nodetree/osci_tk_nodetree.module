<?php

function osci_tk_nodetree_menu()
{
	$items = array();

	$items['ajax/nodetree/%/%/%'] = array(
			'title'             => 'Nodetree Autocomplete',
			'page callback'     => 'osci_tk_nodetree_autocomplete',
			'page arguments'	=> array(2,3,4),
			'access arguments'  => array('access content'),
			'type'              => MENU_CALLBACK
	);

	return $items;
}

function osci_tk_nodetree_theme() {
	$themes = array();
	$themes['osci_tk_nodetree_table_form'] = array(
		'arguments' => array('form' => NULL),
		'render element' => 'form'
	);
	return $themes;
}

function osci_tk_nodetree_field_info() {
	$fields = array();
	$fields['osci_tk_nodetree'] = array(
		'label' => 'Node Tree',
		'description' => 'Stores a hierarchial tree of references to other nodes',
		'default_widget' => 'nodetree_nodetree_form',
		'default_formatter' => 'nodetree_default'
	);
	return $fields;
}

function osci_tk_nodetree_field_formatter_info() {
	$info = array();
	$info['nodetree_default'] = array(
		'label' => 'Default',
		'field types' => array('osci_tk_nodetree')
	);
	return $info;
}

function osci_tk_nodetree_field_is_empty($item, $field) {
	if ($field['type'] === 'osci_tk_nodetree') {
		if (empty($item['target_nid'])) {
			return TRUE;
		}
	}
	return FALSE;
}

function osci_tk_nodetree_field_widget_info() {
	$info = array();
	$info['nodetree_nodetree_form'] = array(
		'label' => 'Node Tree',
		'field types' => array('osci_tk_nodetree'),
		'behaviors' => array(
			'multiple values' => FIELD_BEHAVIOR_CUSTOM,
			'default value' => FIELD_BEHAVIOR_DEFAULT
		)
	);
	return $info;
}

function osci_tk_nodetree_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
	if ($field['type'] === 'osci_tk_nodetree') {
 		foreach($items as &$item) {
 			// detect nids in parent_nid field
 			preg_match('/\[nid:(\d+)\]/', $item['parent_nid'], $matches);
 			if (is_array($matches) && isset($matches[1])) {
 				$item['parent_nid'] = $matches[1];
 			}
 			// make sure nids are parsed out
			preg_match('/\[nid:(\d+)\]/', $item['target_nid'], $matches);
			if (is_array($matches) && isset($matches[1])) {
				$item['target_nid'] = $matches[1];
			}
 		}
 		$items = osci_tk_nodetree_sort_nodetree($items);
	}

}

function osci_tk_nodetree_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	if ($instance['widget']['type'] === 'nodetree_nodetree_form') {
		$max = $form_state['field'][$field['field_name']][LANGUAGE_NONE]['items_count'] + 1;

		$maxWeight = 0;
		for ($i = 0; $i < $max; $i++) {
			$element[$i]['target_nid'] = array(
				'#type' => 'textfield',
				'#title' => 'Section',
				'#autocomplete_path' => 'ajax/nodetree/'  . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'],
				'#attributes' => array('class' => array('target-field')),
				'#default_value' => isset($items[$i]['target_nid']) ?
					osci_tk_nodetree_autocomplete_default($items[$i]['target_nid']) : ''
			);
			$element[$i]['parent_nid'] = array(
				'#type' => 'textfield',
				'#title' => 'Parent Node',
				'#size' => 5,
				'#attributes' => array('class' => array('parent-field')),
				'#default_value' => isset($items[$i]['parent_nid']) ? $items[$i]['parent_nid'] : ''
			);

			if (isset($items[$i]['weight']) && $items[$i]['weight'] > $maxWeight) {
				$maxWeight = $items[$i]['weight'];
			}

			if (!isset($items[$i]['weight']) || $items[$i]['weight'] === $maxWeight) {
				$maxWeight++;
			}

			$element[$i]['weight'] = array(
				'#type' => 'textfield',
				'#title' => 'Weight',
				'#size' => 5,
				'#attributes' => array('class' => array('weight-field')),
				'#default_value' => isset($items[$i]['weight']) ? $items[$i]['weight'] : $maxWeight
			);
			$element[$i]['depth'] = array(
				'#type' => 'textfield',
				'#title' => 'Depth',
				'#size' => 5,
				'#attributes' => array('class' => array('depth-field')),
				'#default_value' => isset($items[$i]['depth']) ? $items[$i]['depth'] : 0
			);
		}

		$element['add_more'] = array(
			'#type' => 'submit',
			'#name' => 'nodetree_add_more',
			'#value' => t('Add another section'),
			'#attributes' => array('class' => array('field-add-more-submit')),
			'#limit_validation_errors' => array(),
			'#submit' => array('osci_tk_nodetree_add_more_submit'),
			'#ajax' => array(
				'callback' 	=> 'osci_tk_nodetree_add_more_js',
				'wrapper' 	=> 'nodetree-wrapper',
				'effect' 	=> 'fade',
				'method' 	=> 'replace'
			),
			'#weight' => 100
		);
		$element['#theme'] = 'osci_tk_nodetree_table_form';
	}
	return $element;
}

function theme_osci_tk_nodetree_table_form($variables) {
	$form = $variables['form'];
	$rows = array();
	foreach (element_children($form) as $key) {
		if (is_int($key)) {
			// increase indentation unless first depth level
			$firstRow = "";
			if ($form[$key]['depth']['#value'] > 0) {
				$firstRow = theme('indentation', array('size' => $form[$key]['depth']['#value']));
			}
			// render the fields into a table row
			$row = array(
				'data' => array($firstRow,
					drupal_render($form[$key]['weight']),
					drupal_render($form[$key]['depth']),
					drupal_render($form[$key]['parent_nid']),
					drupal_render($form[$key]['target_nid']),
				),
				'class' => array('draggable')
			);
			$rows[] = $row;
		}
	}

	// add tabledrag functionality
	drupal_add_tabledrag('nodetree_table', 'match', 'parent', 'parent-field', 'parent-field', 'target-field', TRUE);
	drupal_add_tabledrag('nodetree_table', 'order', 'self', 'weight-field');
	drupal_add_tabledrag('nodetree_table', 'depth', 'group', 'depth-field');
	$header = array('', 'Weight', 'Depth', 'Parent Node', 'Sections');
	$output = '<div id="nodetree-wrapper">';
	$output .= theme('table', array(
		'header' => $header,
		'rows' => $rows,
		'attributes' => array('id' => 'nodetree_table')
	));

	$output .= drupal_render($form['add_more']);
	$output .= '</div>';
	return $output;
}

function osci_tk_nodetree_add_more_submit($form, &$form_state) {
	$form_state['field']['field_nodetree'][LANGUAGE_NONE]['items_count']++;
	$form_state['rebuild'] = true;
}

function osci_tk_nodetree_add_more_js($form, $form_state) {
	return $form['field_nodetree'];
}

function osci_tk_nodetree_sort_nodetree($items) {
	// sorted will end up a flat representation of the hierarchy
	$sorted = array();

	// find the maximum depth
	$maxDepth = 0;
	foreach ($items as $item) {
		if ($item['depth'] > $maxDepth) $maxDepth = $item['depth'];
	}
	// for each depth:
	for ($depth = 0; $depth <= $maxDepth; $depth++) {
		// find all members at this depth
		$members = array();
		foreach ($items as $item) {
			if ((int)$item['depth'] === $depth) {
				$members[] = $item;
			}
		}
		// if depth is zero (top level):
		if ($depth === 0) {
			// sort members by weight
			usort($members, 'osci_tk_nodetree_weight_sort');
			// add to sorted array
			foreach ($members as $member) {
				$sorted[] = $member;
			}
		}
		// else:
		else {
			// sort members by weight reversed
			usort($members, 'osci_tk_nodetree_weight_rsort');
			// for each member:
			foreach ($members as $member) {
				// find parent in sorted
				for ($i = 0; $i < count($sorted); $i++) {
					$sItem = $sorted[$i];
					if ($sItem['target_nid'] === $member['parent_nid']) {
						// insert into sorted array immediately after parent
						array_splice($sorted, ($i + 1), 0, array($member));
						break;
					}
				}
			}
		}
	}
	return $sorted;
}

function osci_tk_nodetree_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array(
		'#theme' => 'item_list',
		'#items' => array()
	);

	if ($display['type'] === 'nodetree_default') {
		$element['#items'] = osci_tk_node_tree_to_renderable_array($items);
	}

	return $element;
}

function osci_tk_node_tree_to_renderable_array($tree, $root = null) {
	$return = array();

	foreach($tree as $k => $item) {
		if ($item['parent_nid'] == $root) {
			unset($tree[$k]);
			$node = node_load($item['target_nid']);
			if ($node) {
				$link = l($node->title, "node/" . $node->nid);
				$editLink = l("edit", "node/" . $node->nid . "/edit");
				$return[] = array(
					'data' => '<div>'.$link.' ('.$editLink.')'.'</div>',
					'children' => osci_tk_node_tree_to_renderable_array($tree, $item['target_nid'])
				);
			}
		}
	}

	return empty($return) ? null : $return;
}

function osci_tk_nodetree_weight_sort($a, $b) {
	return $a['weight'] - $b['weight'];
}

function osci_tk_nodetree_weight_rsort($a, $b) {
	return $b['weight'] - $a['weight'];
}

function osci_tk_nodetree_autocomplete($entityType, $bundle, $fieldName, $query) {
	$field = field_info_field($fieldName);
	$instance = field_info_instance($entityType, $fieldName, $bundle);
	$types = $instance['widget']['settings']['osci_tk_content_types'];
	$types = array_keys(array_filter($types));

	$query = trim(check_plain($query));
    $results = db_select('node', 'n')
        ->fields('n', array('title', 'nid'))
        ->condition('type', $types, 'IN')
        ->condition('status', 1)
        ->condition('title', '%'.db_like($query).'%', 'LIKE')
        ->orderBy('created', 'DESC')
        ->addTag('node_access')
        ->range(0, 100)
        ->execute();

    $response = array();

	foreach($results as $result)
	{
		$response["[nid:{$result->nid}] {$result->title}"] = $result->title;
	}

	drupal_json_output($response);
}

function osci_tk_nodetree_autocomplete_default($nid) {
	$node = node_load($nid);
	if (!$node) return $nid;
	return "[nid:{$nid}] {$node->title}";
}

function osci_tk_nodetree_field_widget_settings_form($field, $instance)
{
	$widget = $instance['widget'];
	$settings = $widget['settings'];
	$form = array();

	if ($widget['type'] === 'nodetree_nodetree_form')
	{
		$form['osci_tk_content_types'] = array(
			'#type' => 'checkboxes',
			'#title' => t('Content types that can be referenced'),
			'#description' => t('The available content types that can be added to this field.'),
			'#default_value' => isset($settings['osci_tk_content_types']) ? $settings['osci_tk_content_types'] : array("section"),
			'#required' => TRUE,
			'#mulitple' => true,
			'#options' => array_map('check_plain', node_type_get_names())
		);
	}

	return $form;
}

function osci_tk_nodetree_get_data_for_nid($nid) {
	$nodeTreeData = array();
	$fields = db_query("SELECT field_name FROM {field_config} WHERE type = 'osci_tk_nodetree'", array(), array('fetch' => PDO::FETCH_ASSOC));
	foreach($fields as $field) {
		$tableName = 'field_data_' . $field['field_name'];
		$treeNodeIds = db_query("SELECT entity_id FROM {" . $tableName . "} WHERE field_nodetree_target_nid = :nid", array(':nid' => $nid), array('fetch' => PDO::FETCH_ASSOC));
		// $treeNodes = db_query("SELECT * FROM {" . $tableName . "} WHERE entity_id = (SELECT entity_id FROM {" . $tableName . "} WHERE field_nodetree_target_nid = :nid) order by entity_id, delta", array(':nid' => $nid), array('fetch' => PDO::FETCH_ASSOC));

		$prevRootNid = null;
		$prevNid = null;
		$next = false;
		foreach($treeNodeIds as $treeNodeId) {
			$treeNodes = db_query("SELECT * FROM {" . $tableName . "} WHERE entity_id = :nid order by entity_id, delta", array(':nid' => $treeNodeId['entity_id']), array('fetch' => PDO::FETCH_ASSOC));

			foreach($treeNodes as $treeNode) {
				if ($prevRootNid === $treeNode['entity_id'] && $next) {
					$nodeTreeData[count($nodeTreeData) - 1]['nextNid'] = $treeNode['field_nodetree_target_nid'];
					$next = false;
				}

				if ($prevRootNid === $treeNode['entity_id'] &&
					isset($nodeTreeData[count($nodeTreeData) - 1]) &&
					$nodeTreeData[count($nodeTreeData) - 1]['nid'] === $treeNode['field_nodetree_parent_nid']) {
					$nodeTreeData[count($nodeTreeData) - 1]['children'][] = $treeNode['field_nodetree_target_nid'];
				}

				if ($prevRootNid !== $treeNode['entity_id']) {
					$prevRootNid = null;
					$prevNid = null;
					$next = false;
				}

				if ($treeNode['field_nodetree_target_nid'] === $nid) {
					$nodeTreeData[] = array(
						'rootNid' => $treeNode['entity_id'],
						'parentNid' => $treeNode['field_nodetree_parent_nid'] ? $treeNode['field_nodetree_parent_nid'] : $treeNode['entity_id'],
						'prevNid' => $prevNid,
						'nextNid' => null,
						'nid' => $treeNode['field_nodetree_target_nid'],
						'children' => array()
					);
					$next = true;
				}

				$prevNid = $treeNode['field_nodetree_target_nid'];
				$prevRootNid = $treeNode['entity_id'];
			}
		}
	}
	return $nodeTreeData;
}

/**
 * Helper function to determine whether or not a entity id is part of a nodetree
 * @param  int $nid The entity's nid
 * @return bool     Whether or not the entity is part of a nodetree
 */
function osci_tk_nodetree_entity_is_tree($nid) {
	$query = db_select('field_config', 'fc')
		->fields('fc', array('field_name'))
		->condition('type', 'osci_tk_nodetree', '=');
	$fields = $query->execute();

	$found = false;
	foreach($fields as $field) {
		$tableName = 'field_data_' . $field->field_name;
		$query = db_select($tableName, 'nt')
			->fields('nt', array('entity_id'))
			->condition(db_or()->condition('entity_id', $nid)->condition('field_nodetree_target_nid', $nid))
			->execute();
		if($query->rowCount()) $found = true;
	}
	return $found;
}

function osci_tk_nodetree_block_info() {
	return array(
		'osci_tk_nodetree_navigation' => array(
			'info' => t('Nodetree Navigation'),
			'cache' => DRUPAL_CACHE_PER_PAGE
		)
	);
}

function osci_tk_nodetree_block_view($delta = '') {
	$block = array();

	switch ($delta) {
		case 'osci_tk_nodetree_navigation':
			$block['subject'] = t('Nodetree Navigation');
			$block['content'] = '';
			if ($node = menu_get_object()) {
				$treeData = osci_tk_nodetree_get_data_for_nid($node->nid);

				foreach($treeData as $tree) {
					$rootNode = node_load($tree['rootNid']);
					$title = l($rootNode->title, "node/" . $tree['rootNid']);

					$items = array();
					if ($tree['parentNid']) {
						$parentNode = node_load($tree['parentNid']);
						$items[] = "Up: " . l($parentNode->title, "node/" . $tree['parentNid']);
					}

					if ($tree['prevNid']) {
						$parentNode = node_load($tree['prevNid']);
						$items[] = "Prev: " . l($parentNode->title, "node/" . $tree['prevNid']);
					}

					if ($tree['nextNid']) {
						$parentNode = node_load($tree['nextNid']);
						$items[] = "Next: " . l($parentNode->title, "node/" . $tree['nextNid']);
					}

					if (count($tree['children'])) {
						$childItems = array(
							'data' => 'Direct Descendants',
							'children' => array()
						);

						foreach($tree['children'] as $childNid) {
							$childNode = node_load($childNid);
							$childItems['children'][] = l($childNode->title, "node/" . $childNid);
						}

						$items[] = $childItems;
					}

					$items = array_merge($items, module_invoke_all("nodetree_navigation_link", $tree));

					$block['content'] .= theme_item_list(array(
						'items' => $items,
						'title' => $title,
						'type' => "ul",
						'attributes' => array()
					));
				}
			}

			break;
	}

	return $block;
}
