<?php


function osci_tk_notes_menu() {
    global $user;
    $items = array();

    $items['api/notes'] = array(
        'title'             => 'Process a note request',
        'page callback'     => 'osci_tk_notes_request',
        //'access callback'   => 'user_is_logged_in',
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK
    );

    $items['api/notes/export'] = array(
        'title'             => 'Export User Notes',
        'page callback'     => 'osci_tk_notes_export',
        'access callback'   => TRUE,
        //'access callback'   => 'user_is_logged_in',
        'type'              => MENU_CALLBACK
    );

    // $items['api/notes/demo'] = array(
    //  'title'             => t('Demonstrate Notes API'),
    //  'page callback'     => 'drupal_get_form',
    //  'page arguments'    => array('osci_tk_notes_demo'),
    //  'access callback'   => array(($user->uid == 1))
    // );

    return $items;
}

function osci_tk_notes_theme($existing, $type, $theme, $path) {
    return array(
        'osci_tk_notes_export' => array(
            'variables' => array(
                'notes' => array()
            ),
            'template' => 'templates/osci_tk_notes_export',
        )
    );
}

function osci_tk_notes_request() {
    global $user;
    if ($user->uid > 0) {
        if (count($_POST) > 0) {
            // POST request, insert a note into the db
            if (isset($_POST['section_id']) && !empty($_POST['section_id'])
                && isset($_POST['content_id']) && !empty($_POST['content_id'])
                && isset($_POST['note']) && !empty($_POST['note'])) {

                // if id is provided this is an update or delete
                if (isset($_POST['id'])) {
                    $note = node_load($_POST['id']);
                    if ($note) {
                        if ($note->uid == $user->uid) {
                            // check if this is a delete op
                            if (isset($_POST['delete']) && $_POST['delete'] > 0) {
                                node_delete($note->nid);
                                print json_encode(array('success' => true));
                                drupal_exit();
                            }
                            else {
                                // update the body
                                $note->body['und'][0]['value'] = $_POST['note'];
                                // update the tags
                                $note->field_note_tags['und'] = _osci_tk_notes_extract_tags($note);
                                // save the node and return
                                node_save($note);
                                // form the response
                                print json_encode(array(
                                    'success' => true,
                                    'note' => array(
                                        'id'            => $note->nid,
                                        'section_id'    => $note->field_section['und'][0]['nid'],
                                        'content_id'    => $note->field_content_id['und'][0]['value'],
                                        'note'          => $note->body['und'][0]['value'],
                                        'tags'          => $_POST['tags'],
                                        'paragraph_number' => $note->field_paragraph_number['und'][0]['value']
                                    )
                                ));
                                drupal_exit();
                            }
                        }
                        else {
                            print json_encode(array('success' => false, 'error' => 'this is not your note'));
                            drupal_exit();
                        }
                    }
                    else {
                        print json_encode(array('success' => false, 'error' => 'could not find note'));
                        drupal_exit();
                    }
                }

                // find the section id
                $section = node_load($_POST['section_id']);
                if ($section) {
                    // form the new note object
                    $note = new stdClass();
                    $note->type = "note";
                    node_object_prepare($note);
                    $note->language = LANGUAGE_NONE;
                    $note->uid = $user->uid;
                    $note->status = 1;
                    $note->title = $user->name.' s:'.$section->nid.' c:'.$_POST['content_id'];
                    $note->body['und'][0]['value'] = $_POST['note'];
                    $note->field_section['und'][0]['nid'] = $section->nid;
                    $note->field_content_id['und'][0]['value'] = $_POST['content_id'];
                    $note->field_paragraph_number['und'][0]['value'] = $_POST['paragraph_number'];

                    // support tags
                    $note->field_note_tags['und'] = _osci_tk_notes_extract_tags($note);
                    node_save($note);
                    print json_encode(array(
                        'success' => TRUE,
                        'note' => array(
                            'id' => $note->nid,
                            'note' => $note->body['und'][0]['value'],
                            'section_id' => $note->field_section['und'][0]['nid'],
                            'content_id' => $note->field_content_id['und'][0]['value'],
                            'tags' =>  $_POST['tags'],
                            'paragraph_number' => $note->field_paragraph_number['und'][0]['value']
                        )
                    ));
                    return;
                }
            }
            // if execution reaches this point, the note submission wasn't saved, send error
            print json_encode(array('success' => FALSE));
            return;
        }

        // GET request, retreive user's notes
        else {
            $sid = $_GET['section_id'] ? $_GET['section_id'] : NULL;
            $pid = $_GET['content_id'] ? $_GET['content_id'] : NULL;
            $note_nodes = osci_tk_notes_get_section_notes($user->uid, $sid, $pid);
            // if children of this section were requested, get them too
// TODO: refactor this to work in the context of a publication
//          if ($_GET['include_children'] == 'true') {
//              $section = node_load($_GET['section_id']);
//              $subtree = book_menu_subtree_data($section->book);
//              // remove the useless array wrapper
//              $menu = array_pop($subtree);
//              $section_nids = osci_tk_notes_get_book_children_section_nids($menu);
//              foreach ($section_nids as $snid) {
//                  $notes = osci_tk_notes_get_section_notes($user->uid, $snid);
//                  foreach ($notes as $note) {
//                      $note_nodes[] = $note;
//                  }
//              }
//          }
            $notes = array();
            foreach ($note_nodes as $row) {
                // get the tags for this note
                $tags = array();
                $tag_result = db_query('SELECT field_note_tags_tid as tid
                    FROM {field_data_field_note_tags}
                    WHERE entity_id = :nid',
                    array('nid' => $row->nid));
                foreach ($tag_result as $tag_row) {
                    $tag = taxonomy_term_load($tag_row->tid);
                    if ($tag) {
                        $tags[] = $tag->name;
                    }
                }
                // form the returned note
                $notes[] = array(
                    'id'            => $row->nid,
                    'section_id'    => $row->sid,
                    'content_id'    => $row->cid,
                    'paragraph_number' => $row->pnum,
                    'note'          => $row->body,
                    'tags'          => $tags
                );
            }
            print json_encode(array('success' => TRUE, 'notes' => $notes));
            return;
        }
    }
    else {
        print json_encode(array('success' => false, 'error' => 'You must be logged in to retrieve notes'));
        return;
    }
}

function osci_tk_notes_get_section_notes($uid, $sid = NULL, $pid = NULL) {
    $note_nodes = array();
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.uid', $uid, '=');
    $query->condition('n.type', 'note', '=');

    $query->join('field_data_body', 'b', 'n.nid = b.entity_id');
    $query->addField('b', 'body_value', 'body');

    $query->join('field_data_field_section', 's', 'n.nid = s.entity_id');
    $query->addField('s', 'field_section_nid', 'sid');

    $query->join('field_data_field_content_id', 'c', 'n.nid = c.entity_id');
    $query->addField('c', 'field_content_id_value', 'cid');

    $query->join('field_data_field_paragraph_number', 'p', 'n.nid = p.entity_id');
    $query->addField('p', 'field_paragraph_number_value', 'pnum');

    if (isset($sid) && !empty($sid)) {
        $query->condition('s.field_section_nid', $sid);
    }

    if (isset($pid) && !empty($pid)) {
        $query->condition('p.field_content_id_value', $pid);
    }

    $result = $query->execute();
    foreach ($result as $row) {
        $note_nodes[] = $row;
    }
    return $note_nodes;
}

function osci_tk_notes_get_book_children_section_nids($menu) {
    $nids = array();
    if (isset($menu['below'])) {
        foreach ($menu['below'] as $submenu) {
            $nids[] = $submenu['link']['nid'];
            if (isset($submenu['below']) && count($submenu['below']) > 0) {
                $sections = osci_tk_notes_get_book_children_section_nids($submenu);
                foreach ($sections as $section) {
                    $nids[] = $section;
                }
            }
        }
    }
    return $nids;
}


function osci_tk_notes_demo() {
    global $user;
    drupal_add_js(drupal_get_path('module', 'osci_tk_notes') . '/js/demo.js');

    $form = array();

    $form['store'] = array(
        '#type'             => 'fieldset',
        '#title'            => 'Store a User Note',
        '#attributes'       => array('class' => array('store-form'))
    );
    $form['store']['uid'] = array(
        '#type'             => 'textfield',
        '#title'            => 'User id',
        '#default_value'    => $user->uid,
        '#required'         => FALSE,
        '#disabled'         => TRUE
    );
    $form['store']['section_id'] = array(
        '#type'             => 'textfield',
        '#title'            => 'Section id',
        '#required'         => TRUE
    );
    $form['store']['content_id'] = array(
        '#type'             => 'textfield',
        '#title'            => 'Content id',
        '#required'         => TRUE
    );
    $form['store']['tags'] = array(
        '#type'             => 'textfield',
        '#title'            => 'Tags',
        '#description'      => 'Comma separated list of tags'
    );
    $form['store']['note'] = array(
        '#type'             => 'textarea',
        '#title'            => 'Note',
        '#required'         => TRUE
    );
    $form['store']['submit'] = array(
        '#type'             => 'button',
        '#title'            => 'Paragraph id',
        '#value'            => 'Submit',
        '#required'         => TRUE
    );
    $form['store']['result'] = array(
        '#type'             => 'item',
        '#title'            => 'Result',
        '#markup'           => '<pre style="width: 600px;"><div id="store-result"></div></pre>'
    );

    $form['retrieve'] = array(
        '#type'             => 'fieldset',
        '#title'            => 'Retrieve a User Note',
        '#attributes'       => array('class' => array('retrieve-form'))
    );
    $form['retrieve']['uid'] = array(
        '#type'             => 'textfield',
        '#title'            => 'User id',
        '#default_value'    => $user->uid,
        '#required'         => FALSE,
        '#disabled'         => TRUE
    );
    $form['retrieve']['section_id'] = array(
        '#type'             => 'textfield',
        '#title'            => 'Section id',
    );
    $form['retrieve']['content_id'] = array(
        '#type'             => 'textfield',
        '#title'            => 'Content id',
    );
    $form['retrieve']['include_children'] = array(
            '#type'             => 'checkbox',
            '#title'            => 'Include Children',
    );
    $form['retrieve']['submit'] = array(
            '#type'         => 'button',
            '#title'        => '',
            '#value'        => 'Submit',
            '#required'     => TRUE
    );
    $form['retrieve']['result'] = array(
            '#type'         => 'item',
            '#title'        => 'Result',
            '#markup'       => '<pre style="width: 600px;"><div id="ret-result"></div></pre>'
    );

    return $form;
}

function _osci_tk_notes_extract_tags($note) {
    $tags = array();
    $vocab_list = taxonomy_vocabulary_get_names();
    $tags_vid = $vocab_list['note_tags']->vid;
    if (isset($_POST['tags']) && count($_POST['tags']) > 0) {
        foreach ($_POST['tags'] as $tag) {
            if (!empty($tag)) {
                // test if this tag already exist in our vocab
                $matched = FALSE;
                $matches = taxonomy_get_term_by_name($tag);
                foreach ($matches as $match) {
                    if ($match->vid == $tags_vid) {
                        $matched = TRUE;
                        $tags[]['tid'] = $match->tid;
                    }
                }
                if (!$matched) {
                    // no existing tag, create a new term
                    $term = new stdClass();
                    $term->vid = $tags_vid;
                    $term->name = $tag;
                    taxonomy_term_save($term);
                    $tags[]['tid'] = $term->tid;
                }
            }
        }
        return $tags;
    }
    return array();
}

function osci_tk_notes_export() {
    global $user;
    if ($user->uid > 0) {
        $note_nodes = array();
        $query = db_select('node', 'n');
        $query->fields('n', array('nid'));
        $query->condition('n.uid', $user->uid, '=');
        $query->condition('n.type', 'note', '=');

        $query->join('field_data_body', 'b', 'n.nid = b.entity_id');
        $query->addField('b', 'body_value', 'body');

        $query->join('field_data_field_section', 's', 'n.nid = s.entity_id');
        $query->addField('s', 'field_section_nid', 'sid');

        $query->join('field_data_field_content_id', 'c', 'n.nid = c.entity_id');
        $query->addField('c', 'field_content_id_value', 'cid');

        $query->join('field_data_field_paragraph_number', 'p', 'n.nid = p.entity_id');
        $query->addField('p', 'field_paragraph_number_value', 'pnum');

        $query->join('node', 'ns', 's.field_section_nid = ns.nid');
        $query->addField('ns', 'title', 'section_title');

        $query->addJoin('LEFT', 'field_data_field_note_tags', 'ftags', 'n.nid = ftags.entity_id');
        $query->addJoin('LEFT', 'taxonomy_term_data', 'terms', 'terms.tid = ftags.field_note_tags_tid');

        $query->addExpression('GROUP_CONCAT(terms.name SEPARATOR \', \')', 'tags');

        $query->orderBy('section_title', 'DESC')
              ->orderBy('nid', 'DESC');

        $query->groupBy('nid')
              ->groupBy('body')
              ->groupBy('sid')
              ->groupBy('cid')
              ->groupBy('section_title');

        $result = $query->execute();
        foreach ($result as $row) {
            $treeData = osci_tk_nodetree_get_data_for_nid($row->sid);
            foreach($treeData as $tree) {
                if (!isset($note_nodes[$tree['rootNid']])) {
                    $pubNode = node_load($tree['rootNid']);
                    $note_nodes[$tree['rootNid']] = array(
                        'title' => $pubNode->title,
                        'sections' => array()
                    );
                }

                if (!isset($note_nodes[$tree['rootNid']]['sections'][$row->sid])) {
                    $note_nodes[$tree['rootNid']]['sections'][$row->sid] = array(
                        'title' => $row->section_title,
                        'notes' => array()
                    );
                }

                $note_nodes[$tree['rootNid']]['sections'][$row->sid]['notes'][] = $row;
            }
        }

        print theme("osci_tk_notes_export", array("notes" => $note_nodes));
        drupal_exit();
    }
}
